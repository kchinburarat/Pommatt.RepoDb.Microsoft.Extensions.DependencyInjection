# This is a basic workflow to help you get started with Actions

name: CD

# Controls when the workflow will run
on:
  push:
  pull_request:
  release:
    types:
      - published

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
 # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
################################################# Build #######################################################
  build:
      if: github.event_name == 'release'
      runs-on:  ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Setup .NET Core
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: '5.0.101'
        - name: Restore
          run: dotnet restore        
        - name: Build
          run: dotnet build -c Release --no-restore /p:Version=$VERSION /p:AssemblyVersion=$VERSION /p:InformationalVersion=$VERSION
        - name: Create Release NuGet package
          run: |
            arrTag=(${GITHUB_REF//\// })
            VERSION="${arrTag[2]}"
            echo Version: $VERSION
            VERSION="${VERSION//v}"
            echo Clean Version: $VERSION
            dotnet pack -v normal -c Release --include-symbols --include-source -p:PackageVersion=$VERSION /p:Version=$VERSION /p:AssemblyVersion=$VERSION /p:InformationalVersion=$VERSION -o nupkg src/Pommatt.RepoDb.Microsoft.Extensions.DependencyInjection.csproj
        - name: Push to NuGet Feed
          run: dotnet nuget push ./nupkg/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY       
